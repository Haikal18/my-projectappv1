name: CI/CD Pipeline Next.js App

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: haikal18/my-projectappv1/my-projectapp

jobs:
  # Job 1: Build dan Push Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout kode dari repository
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login ke GitHub Container Registry
      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Extract metadata (tags, labels) for Docker
      - name: 🏷️ Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=
            type=ref,event=branch
          flavor: |
            latest=auto
          # Ensure lowercase
          sep-tags: ','

      # 5. Build and push Docker image
      - name: 🏗️ Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # 6. Output image info
      - name: 📊 Output image information
        run: |
          echo "### 🚀 Docker Image Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 2: Deploy ke MicroK8s di WSL2
  deploy-to-k8s:
    name: Deploy to MicroK8s (WSL2)
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      # 1. Checkout repository untuk mendapatkan file k8s
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # 2. Login to GHCR untuk pull image
      - name: 🔐 Login to GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      # 3. Pull latest image from GHCR
      - name: 🔄 Pull latest image from GHCR
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 4. Save and transfer image to MicroK8s
      - name: 💾 Save and transfer image to MicroK8s
        run: |
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -o /tmp/my-projectapp.tar
          microk8s ctr image import /tmp/my-projectapp.tar

      # 5. Deploy to Kubernetes
      - name: ☸️ Deploy to Kubernetes
        run: |
          microk8s kubectl apply -f k8s-deployment.yaml
          
      # 6. Wait for deployment rollout
      - name: ⏳ Wait for deployment rollout
        run: |
          microk8s kubectl rollout status deployment/my-projectapp -n my-projectapp --timeout=600s
          
      # 7. Verify deployment
      - name: ✅ Verify deployment
        run: |
          echo "### ✨ Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          microk8s kubectl get pods -l app=my-projectapp -n my-projectapp >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          microk8s kubectl get svc my-projectapp-service -n my-projectapp >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          microk8s kubectl get hpa my-projectapp-hpa -n my-projectapp 2>/dev/null >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          
      # 8. Get service URL
      - name: 🌐 Get Service URL
        run: |
          SERVICE_IP=$(microk8s kubectl get svc my-projectapp-service -n my-projectapp -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$SERVICE_IP" ]; then
            SERVICE_IP=$(microk8s kubectl get svc my-projectapp-service -n my-projectapp -o jsonpath='{.spec.clusterIP}')
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Access your app at:** http://$SERVICE_IP" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Local access (port-forward):**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "microk8s kubectl port-forward svc/my-projectapp-service 3000:80 -n my-projectapp" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
